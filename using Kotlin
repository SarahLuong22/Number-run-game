import kotlin.random.Random

//to find the divisor of a number
fun divisor(number: Int): List<Int> {
  var divisors : List<Int> = listOf()
  for (i in 2.rangeTo(number/2+1)) {
    if (number % i == 0) {
      divisors += i
    }
  }
  if (divisors.isEmpty()) {
    divisors += number
  }
  return divisors
}

//to  effectuate/perform an Operator
//1 = +
//2 = -
//3 = *
//4 = /
fun strToOperator(number1: Int, number2: Int, strOperator: Int): Int {
  var result: Int = 0
  if (strOperator == 1) {
    result = (number1 + number2) 
  } else if (strOperator == 2) {
    result = (number1 - number2)
  } else if (strOperator == 3) {
    result =  (number1 * number2) 
  } else if (strOperator == 4) {
    if (number1 % number2 == 0) {
      result =  number1 / number2
    } else {
      result =  -1
    }
    
  }
  return result
}

//at least how many choices is safe = num_of_safe_choice
//order of safe and risk choice
fun choiceSafetyOrder (num_of_safe_choice: Int): List<Boolean> {
  var order: List<Boolean> = listOf(true, true, true)
  if (num_of_safe_choice == 3) {
    order = listOf(true, true, true)
  } else if (num_of_safe_choice == 2) { 
    order = listOf(true, true, false).shuffled()
  } else if (num_of_safe_choice == 1) {
    order = listOf(true, false, false).shuffled()
  }
  return order
}


// generating safe choice
fun safeChoice(operatorList: MutableList<Int>, yourNum: Int): Pair<Int, Int> {

  var operator: MutableList<Int> = operatorList
    
  if (yourNum == 1) {
    for (i in operatorList) {
      if (i.equals(2) or i.equals(4)) {
        operator.remove(i)
      }
    }
  }
  
  if (yourNum == 100) {
    for (i in operatorList) {
      if (i == 1) {
        operator.remove(i)
      } 
    }
  }
  
  if (yourNum >= 50) {
    for (i in operatorList) {
      if (i == 3) {
        operator.remove(i)
      } 
    } 
  }
      
  var choiceOperator = operator.random()
  // operator.remove(choice_operator)
  var choiceNum: Int = 2
  
  if (choiceOperator == 1) {
    choiceNum = Random.nextInt(yourNum + 1, 100) - yourNum
  } else if (choiceOperator == 2) {
    choiceNum = yourNum - Random.nextInt(1, yourNum - 1)
  } else if (choiceOperator == 3) {
    choiceNum = Random.nextInt(yourNum * 2 - 1, 100)/yourNum
  } else if (choiceOperator == 4) {
    choiceNum = divisor(yourNum).random()
  }
  
  return Pair(choiceOperator, choiceNum)
}

// generating risk choice
fun riskChoice (operatorList: MutableList<Int>): Pair<Int, Int> {
  var operator: MutableList<Int> = operatorList
  var choiceOperator = operator.random()
  // operator.remove(choice_operator)
  var choiceNum: Int = 2
       
  if (choiceOperator == 1) {
    choiceNum = Random.nextInt(1, 70)
  } else if (choiceOperator == 2) {
    choiceNum = Random.nextInt(1, 70)
  } else if (choiceOperator == 3) {
    choiceNum = Random.nextInt(2, 20)
  } else if (choiceOperator == 4) {
    choiceNum = Random.nextInt(2, 10)
  }
  
    return Pair(choiceOperator, choiceNum)
}

fun stringOperator (intOperator: Int): String {
    var stringOpe: String = ""
    if (intOperator == 1) {
        stringOpe = "+"
    } else if (intOperator == 2) {
        stringOpe = "-"
    } else if (intOperator == 3) {
        stringOpe = "*"
    } else if (intOperator == 4) {
        stringOpe = "/"
    } 
    return stringOpe
}

fun runningCycle (startCycle: Int, endCycle: Int, operatorList: MutableList<Int>, safety: Int, yourNumber: Int): Int {
  var yourNum = yourNumber
  var order = choiceSafetyOrder (safety)
  var choiceOperator: MutableList<Int> = mutableListOf(1,1,1)
  var choiceNum: MutableList<Int> = mutableListOf(1,1,1)

  for (i in startCycle.rangeTo(endCycle + 1)) {
    
    println("Your streak is " + (i-1))
  
    for (z in 0..2) {
      if (order[z] == true) {
        var (first, second) = safeChoice(operatorList, yourNum)
        choiceOperator[z] = first
        choiceNum[z] = second
        if (z >=1) {
          if (choiceOperator[z] == choiceOperator[z-1] && choiceNum[z] ==  choiceNum[z-1]) {
            var (first, second) = safeChoice(operatorList, yourNum)
        	choiceOperator[z] = first
        	choiceNum[z] = second
          }
        }
        if (z >=2) {
          while (((choiceOperator[z] == choiceOperator[z-2]) && (choiceNum[z] ==  choiceNum[z-2])) || 
                  ((choiceOperator[z] == choiceOperator[z-1]) && (choiceNum[z] ==  choiceNum[z-1]))) {
            var (first, second) = safeChoice(operatorList, yourNum)
        	choiceOperator[z] = first
        	choiceNum[z] = second
          }
        }
      }
      if (order[z] == false) {
        var (first, second) = riskChoice(operatorList)
        choiceOperator[z] = first
        choiceNum[z] = second
      
        if (z >=1) {
          while (choiceOperator[z] == choiceOperator[z-1] && choiceNum[z] == choiceNum[z-1]) {
            var (first, second) = riskChoice(operatorList)
        	choiceOperator[z] = first
        	choiceNum[z] = second
          }
        }
        if (z >=2) {
          while (((choiceOperator[z] == choiceOperator[z-2]) && (choiceNum[z] ==  choiceNum[z-2])) || 
                  ((choiceOperator[z] == choiceOperator[z-1]) && (choiceNum[z] ==  choiceNum[z-1]))) {
            var (first, second) = riskChoice(operatorList)
        	choiceOperator[z] = first
        	choiceNum[z] = second
          }
        }
      }
      
      println("Choice " + (z+1) + ": " + stringOperator(choiceOperator[z]) + choiceNum[z])
    }
  
      
  println("What is your choice?     ")
  var userChoice: Int = readLine()!!.toInt() - 1
  
  yourNum = strToOperator(yourNum, choiceNum[userChoice], choiceOperator[userChoice])
  println(yourNum)
    if (yourNum < 0 || yourNum > 100){
      println ("You failed. Your streak is " + i)
      break
    } else {
      println ("Good!")
      println ()
      println ()
    }
  }
  return yourNum
}

